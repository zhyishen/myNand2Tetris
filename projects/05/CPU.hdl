// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution  0v...v  111accccccdddjjj
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.

    
    Not(in = instruction[0], out = notInstruction0);
    Or(a = notInstruction0, b = instruction[10], out = aRload); //ARegisterControl

    Mux16(a = instruction, b = aluOut, sel = notInstruction0, out = aRIn); //MuxBeforeA

    ARegister(in = aRIn, load = aRload, out = aROut, out[0..14] = addressM);  //ARegister

    Mux16(a = aROut, b = inM, sel = instruction[3], out = aOrMinALU); //MuxBeforeALU

    DRegister(in = aluOut, load = instruction[12], out = dOut); //DRegister

    ALU(x = dOut, y = aOrMinALU, zx = instruction[4], nx = instruction[5], zy = instruction[6], ny = instruction[7], f = instruction[8], no = instruction[9], out = aluOut,out = outM,zr = zr, ng = ng);

    Not(in = zr, out = notZ); //zeroNot
    Not(in = ng, out = notN); //negativeNot
    And(a = zr, b = ng, out = pozitive); //pozitive
    Not(in = pozitive, out = notP); //pozitiveNot

    And(a = pozitive, b = instruction[15], out = jgt); //JGT

    And(a = zr, b = instruction[14], out = jeq); //JEQ

    And(a = instruction[14], b = instruction[15], out = jgeins);
    And(a = jgeins, b = notN, out = jge); // JGE

    And(a = ng, b = instruction[13], out = jlt); //JLT

    And(a = instruction[13], b = instruction[15], out = jneins);
    And(a = jneins, b = notZ, out = jne); //JNE

    And(a = instruction[13], b = instruction[14], out = jleins);
    And(a = jleins, b = notP, out = jle); //JLE

    And(a = instruction[13], b = instruction[14], out = jmpins);
    And(a = jmpins, b = instruction[15], out = jmp); //JMP

    Or(a = jgt, b = jeq, out = jmpcom1);
    Or(a = jge, b = jlt, out = jmpcom2);
    Or(a = jne, b = jle, out = jmpcom3);
    Or(a = jmpcom1, b = jmpcom2, out = jmpcom12);
    Or(a = jmpcom3, b = jmp, out = jmpcom34);
    Or(a = jmpcom12, b = jmpcom34, out = pcload);

    PC(in = aROut, load = pcload, inc = true, reset = reset, out[0..14] = pc); //PC

}
